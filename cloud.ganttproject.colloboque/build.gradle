import org.gradle.api.publish.maven.MavenPublication

plugins {
    id 'application'
    id "org.jetbrains.kotlin.jvm" version "1.6.21"
    id "maven-publish"
    id "org.jetbrains.kotlin.plugin.serialization" version "1.6.21"
}

// Define the main class for the application
mainClassName = 'cloud.ganttproject.colloboque.DevServerKt'

repositories {
    maven {
        url 'https://maven-central.storage.googleapis.com'             // Google's mirror of Maven Central
    }
    mavenCentral()
    mavenLocal()
}

dependencies {
    implementation "biz.ganttproject:biz.ganttproject.core:22.+"
    implementation "biz.ganttproject:ganttproject:22.+"
    implementation 'ch.qos.logback:logback-classic:1.2.11'

    implementation 'com.zaxxer:HikariCP:5.0.1'
    implementation 'org.postgresql:postgresql:42.3.4'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.6.1'
    implementation 'org.slf4j:slf4j-api:1.7.36'
    implementation 'com.github.ajalt.clikt:clikt:3.4.1'
    implementation 'org.nanohttpd:nanohttpd:2.3.1'
    implementation 'org.nanohttpd:nanohttpd-websocket:2.3.1'

    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.3.2'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

compileKotlin {
    kotlinOptions.jvmTarget = "11"
}

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}


group = 'cloud.ganttproject'   // Generated output GroupId
version = '22-SNAPSHOT' // Version in generated output

publishing {
    repositories {
        maven {
            name "ganttproject-maven-repository-internal"
            url "gcs://ganttproject-maven-repository/internal"
        }
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/bardsoftware/ganttproject")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("TOKEN")
            }
        }
    }
    publications {
        libcolloboque(MavenPublication) {
            artifactId = 'colloboque'
            from components.java
        }
    }
}